openapi: 3.0.0
info:
  title: Klabis - OpenAPI 3.1
  description: Klabis API docs
  contact:
    email: klabis@otakar.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 0.1.12
servers:
  - url: https://api.klabis.otakar.io
tags:
  - name: users
  - name: auth
paths:
  /login:
    post:
      tags:
        - auth
      summary: Login to the application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Registration number or email
                password:
                  type: string
                  description: The password for login
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: OIDC obtained token
        '401':
          description: Unauthorized - Invalid username or password
  /logout:
    post:
      tags:
        - auth
      summary: Logout from the application
      responses:
        '200':
          description: User logged out successfully
        '401':
          description: Unauthorized - User is not logged in
  /password:
    put:
      tags:
        - auth
      summary: Set a new password
      description: >
        Sets a new password for the user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: The new password
      responses:
        '200':
          description: New password set successfully
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /users:
    get:
      tags:
        - users
      summary: List all club users
      description: Returns a list of all club users
      responses:
        '200':
          description: A list of club users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
            description: Unauthorized - not logged in

    post:
      tags:
        - users
      summary: Create a new club member
      description: >
        Creates a new club member with the provided details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: New club member created successfully
        '400':
          description: Bad request - Invalid data
        '401':
          description: Unauthorized - not logged in
        '409':
          description: Conflict - User with the same registration number already exists
        '403':
            description: Forbidden - User does not have permission to create a member
  /users/{userId}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Returns a user
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the club member to get
          schema:
            type: integer
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - not logged in
    put:
      tags:
        - users
      summary: Update member
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Club member updated successfully
        '401':
          description: Unauthorized - not logged in
        '403':
          description: Forbidden - User does not have permission to update a member
        '404':
          description: Club member not found
    delete:
      tags:
        - users
      summary: Archive member
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the club member to delete
          schema:
            type: integer
      responses:
        '200':
          description: Club member archived successfully
        '401':
          description: Unauthorized - User does not have permission to delete a member
        '404':
          description: Club member not found
  /users/{userId}/delete-check:
    get:
      tags:
        - users
      summary: Check if user can be deleted
      description: >
            returns reason why user can't be deleted
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the club member to check
          schema:
            type: integer
      responses:
        '200':
          description: Club member can be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCheck'
        '401':
          description: Unauthorized - not logged in
        '403':
            description: Forbidden - User does not have permission to delete a member
        '404':
          description: Club member not found
  /users/registration-number:
    get:
      tags:
        - users
      summary: Get a free registration ID
      description: >
        Returns a free registration ID that can be used to register a new club member.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dateOfBirth:
                  type: string
                gender:
                  type: string
                  enum: [male, female]
      responses:
        '200':
          description: A free registration ID
          content:
            application/json:
              schema:
                type: string
                description: A free registration ID
        '401':
          description: Unauthorized - not logged in
  /users/exports/cus:
    get:
      tags:
        - users
      summary: export users in CUS format
      responses:
        '200':
          description: A list of differences
        '401':
          description: Unauthorized - not logged in
        '403':
          description: Forbidden - User does not have permission to delete a member
  /users/oris:
    get:
      tags:
        - users
      summary: get info about existing user from oris
      description: used when preexisting user is added to the system
      responses:
        '200':
          description: user info
          # content:
        '401':
          description: Unauthorized - not logged in
        '403':
          description: Forbidden - User does not have permission for this
components:
  schemas:
    Contact:
      type: object
      properties:
        isPrimary:
          type: boolean
          description: Whether the contact is primary or not
        email:
          type: string
          format: email
          description: Email address of the club member or guardian
        phone:
          type: string
          description: Phone number of the club member or guardian
        note:
          type: string
          description: Note about the contact
    Address:
      type: object
      properties:
        streetAndNumber:
          type: string
          description: Street name and number
        city:
          type: string
          description: City
        postalCode:
          type: string
          description: Postal or ZIP code
        country:
          type: string
          description: two letter country code, ISO 3166-1 alpha-2
    IdentityCard:
      type: object
      properties:
        number:
          type: string
          description: Personal identification number of the club member
        expiryDate:
          type: string
          format: date
          description: Expiry date of the ID card, YYYY-MM-DD
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the club member
        registrationNumber:
          type: string
          description: Registration number of the club member
        firstName:
          type: string
          description: First name of the club member
        lastName:
          type: string
          description: Last name of the club member
        dateOfBirth:
          type: string
          format: date
          description: Date of birth of the club member
        birthCertificateNumber:
          type: string
        identityCard:
          $ref: '#/components/schemas/IdentityCard'
        nationality:
          type: string
          description: two letter country code, ISO 3166-1 alpha-2
        address:
          $ref: '#/components/schemas/Address'
        contact:
          type: object
          items:
            $ref: '#/components/schemas/Contact'
        guardians:
          type: array
          items:
            $ref: '#/components/schemas/Guardian'
        siCards:
          type: array
          items:
            type: object
            properties:
              number:
                type: number
                description: Chip number assigned to the club member
              isPrimary:
                type: boolean
                description: Whether the contact is primary or not
        gender:
          type: string
          enum: [male, female]
        licences:
          type: object
          items:
            $ref: '#/components/schemas/Licences'
        bankAccount:
          type: string
          description: Bank account number of the club member IBAN
        dietaryRestrictions:
          type: string
          description: Dietary restrictions of the club member
        drivingLicence:
          type: string
          enum: [B, BE, C, D, None]
        medicCourse:
          type: boolean
          description: Whether the club member has completed the medic course
    CreateUser:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the club member
        lastName:
          type: string
          description: Last name of the club member
        registrationNumber:
          type: string
          description: Registration number of the club member
        gender:
          type: string
          enum: [ male, female ]
        dateOfBirth:
          type: string
          format: date
          description: Date of birth of the club member
        birthCertificateNumber:
          type: string
        nationality:
          type: string
          description: two letter country code, ISO 3166-1 alpha-2
        address:
          $ref: '#/components/schemas/Address'
        contact:
          type: object
          items:
            $ref: '#/components/schemas/Contact'
        guardians:
          type: array
          items:
            $ref: '#/components/schemas/Guardian'
        siCard:
          properties:
            number:
              type: number
              description: Chip number assigned to the club member
        dietaryRestrictions:
          type: string
          description: Dietary restrictions of the club member
    UpdateUser:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the club member
        registrationNumber:
          type: string
          description: Registration number of the club member
        firstName:
          type: string
          description: First name of the club member
        lastName:
          type: string
          description: Last name of the club member
        dateOfBirth:
          type: string
          format: date
          description: Date of birth of the club member
        birthCertificateNumber:
          type: string
        identityCard:
          $ref: '#/components/schemas/IdentityCard'
        nationality:
          type: string
          description: two letter country code, ISO 3166-1 alpha-2
        address:
          $ref: '#/components/schemas/Address'
        contact:
          type: object
          items:
            $ref: '#/components/schemas/Contact'
        guardians:
          type: array
          items:
            $ref: '#/components/schemas/Guardian'
        siCards:
          type: array
          items:
            type: object
            properties:
              number:
                type: number
                description: Chip number assigned to the club member
              isPrimary:
                type: boolean
                description: Whether the contact is primary or not
        gender:
          type: string
          enum: [ male, female ]
        bankAccount:
          type: string
          description: Bank account number of the club member IBAN
        dietaryRestrictions:
          type: string
          description: Dietary restrictions of the club member
        drivingLicence:
          type: string
          enum: [B, BE, C, D, None]
        medicCourse:
          type: boolean
          description: Whether the club member has completed the medic course
    Guardian:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the guardian
        lastName:
          type: string
          description: Last name of the guardian
        contact:
          type: object
          items:
            $ref: '#/components/schemas/Contact'
        note:
          type: string
          description: Note about the guardian (matka, otec)
    Licences:
      type: object
      properties:
        ob:
          type: object
          properties:
            licence:
              type: string
              enum: [ E, R, A, B, C, None ]
              description: License number of the club member
            history:
              type: array
              items:
                type: object
                properties:
                  licence:
                    type: string
                    enum: [ E, R, A, B, C ]
                    description: License number of the club member
                  year:
                    type: string
                    format: date
                    description: Date of the license, YYYY-MM-DD
        referee:
          type: object
          properties:
            licence:
              type: string
              enum: [ R1, R2, R3, None ]
              description: referee license number of the club member
            expiryDate:
              type: string
              format: date
              description: Expiry date of the license, YYYY-MM-DD
        trainer:
          type: object
          properties:
            licence:
              type: string
              enum: [ T1, T2, T3, None ]
              description: trainer license number of the club member
            expiryDate:
              type: string
              format: date
              description: Expiry date of the license, YYYY-MM-DD
    DeleteCheck:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the club member can be deleted or not
        errors:
          type: array
          items:
            type: string
          description: Reasons why the club member can't be deleted
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: From email magic link
    OpenID:
      type: openIdConnect
      openIdConnectUrl: https://openid.example.com/.well-known/openid-configuration



