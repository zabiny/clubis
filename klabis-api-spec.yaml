openapi: 3.0.0
info:
  title: Klabis - OpenAPI 3.1
  description: Klabis API docs
  contact:
    email: klabis@otakar.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 0.1.12
servers:
  - url: https://api.klabis.otakar.io
  - url: https://klabis-auth.polach.cloud
tags:
  - name: users
    description: Members list
  - name: security
    description: API used to control authentization and authorization
  - name: oris
    description: Integration endpoints with ORIS - https://oris.orientacnisporty.cz/
  - name: cus
    description: Integration endpoints with CUS - https://www.cuscz.cz/
security:
  - klabisAuth:
      - openid
paths:
  /password:
    put:
      tags:
        - security
      summary: "[WIP] - Set a new password"
      description: >
        Sets a new password for currently logged in user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: The new password
      responses:
        '200':
          description: New password set successfully
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /users:
    get:
      tags:
        - users
      summary: List all club users
      description: Returns a list of all club users
      parameters:
        - name: view
          in: query
          schema:
            type: string
            enum:
              - complete
              - compact
            default: compact
            description: |-
              Defines set of returned data
              - complete: all user data what are displayable to authenticated user are returned
              - compact: `firstName`, `lastName`, 'registrationNumber`
      responses:
        '200':
          description: A list of club users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
            description: Unauthorized - not logged in

    post:
      tags:
        - users
      summary: Create a new club member
      description: >
        Creates a new club member with the provided details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormCreateUser'
      responses:
        '201':
          description: New club member created successfully
        '400':
          description: Bad request - Invalid data
        '401':
          description: Unauthorized - not logged in
        '409':
          description: Conflict - User with the same registration number already exists
        '403':
            description: Forbidden - User does not have permission to create a member
  /users/{userId}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Returns a user
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the club member to get
          schema:
            type: integer
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - not logged in
    put:
      tags:
        - users
      summary: Update member
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/FormUpdateMyUserData'
                - $ref: '#/components/schemas/FormUpdateUserByAdmin'
      responses:
        '200':
          description: Club member updated successfully
        '401':
          description: Unauthorized - not logged in
        '403':
          description: Forbidden - User does not have permission to update a member
        '404':
          description: Club member not found
  /users/{userId}/archive:
    put:
      tags:
        - users
      summary: Archive member
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the club member to archive
          schema:
            type: integer
      responses:
        '200':
          description: Club member archived successfully
        '403':
          description: Unauthorized - User does not have permission to archive a member
        '404':
          description: Club member not found
  /users/{userId}/delete-check:
    get:
      tags:
        - users
      summary: "[WIP] - Check if user can be deleted"
      description: >
            returns reason why user can't be deleted
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the club member to check
          schema:
            type: integer
      responses:
        '200':
          description: Club member can be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCheck'
        '401':
          description: Unauthorized - not logged in
        '403':
            description: Forbidden - User does not have permission to delete a member
        '404':
          description: Club member not found
  /users/registration-number:
    get:
      tags:
        - users
      summary: "[WIP] - Get a free registration ID"
      description: >
        Returns a free registration ID that can be used to register a new club member.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dateOfBirth:
                  type: string
                gender:
                  type: string
                  enum: [male, female]
      responses:
        '200':
          description: A free registration ID
          content:
            application/json:
              schema:
                type: string
                description: A free registration ID
        '401':
          description: Unauthorized - not logged in
  /cus/exports/members:
    get:
      tags:
        - cus
      summary: "[WIP] - export users in CUS format"
      responses:
        '200':
          description: A list of differences
        '401':
          description: Unauthorized - not logged in
        '403':
          description: Forbidden - User does not have permission to delete a member
  /oris/users:
    get:
      tags:
        - oris
      summary: "[WIP] - get info about existing user from oris"
      description: used when looking for preexisting user is added to the system
      responses:
        '200':
          description: user info
        '401':
          description: Unauthorized - not logged in
        '403':
          description: Forbidden - User does not have permission for this
components:
  schemas:
    CountryCode:
      type: string
      pattern: ^[A-Z]{2}$
      description: two letter country code, ISO 3166-1 alpha-2
    BirthCertificateNumber:
      type: string
      pattern: ^[0-9]{6}/[0-9]{3,4}$
      description: Birth certificate number for Czech citizens
    RegistrationNumber:
      type: string
      pattern: ^[A-Z]{3}[0-9]{4}$
      description: ORIS registration number
    DrivingLicence:
      type: string
      enum: [ B, BE, C, D, None ]
    SICard:
      type: number
      description: SI chip used by member
    Contact:
      type: object
      description: At least one of email or phone value is required
      required:
        - email
        - phone
      properties:
        email:
          type: string
          format: email
          description: Email address of the club member or guardian
        phone:
          type: string
          description: Phone number of the club member or guardian
        note:
          type: string
          description: Note about the contact
    Address:
      type: object
      properties:
        streetAndNumber:
          type: string
          description: Street name and number
        city:
          type: string
          description: City
        postalCode:
          type: string
          description: Postal or ZIP code
        country:
          $ref: '#/components/schemas/CountryCode'
    IdentityCard:
      type: object
      properties:
        number:
          type: string
          description: Personal identification number of the club member
        expiryDate:
          type: string
          format: date
          description: Expiry date of the ID card, YYYY-MM-DD
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the club member
          readOnly: true
        registrationNumber:
          $ref: '#/components/schemas/RegistrationNumber'
        birthCertificateNumber:
          $ref: '#/components/schemas/BirthCertificateNumber'
        identityCard:
          $ref: '#/components/schemas/IdentityCard'
        address:
          $ref: '#/components/schemas/Address'
        firstName:
          type: string
          description: First name of the club member
        lastName:
          type: string
          description: Last name of the club member
        dateOfBirth:
          type: string
          format: date
          description: Date of birth of the club member
        contact:
          type: object
          items:
            $ref: '#/components/schemas/Contact'
        legalGuardians:
          type: array
          items:
            $ref: '#/components/schemas/LegalGuardian'
        siCard:
          type: number
          description: Chip number assigned to the club member
        nationality:
          $ref: '#/components/schemas/CountryCode'
        sex:
          type: string
          enum: [male, female]
        licences:
          $ref: '#/components/schemas/Licences'
        bankAccount:
          $ref: '#/components/schemas/BankAccountNumber'
        dietaryRestrictions:
          type: string
          description: Dietary restrictions of the club member
        drivingLicence:
          type: array
          items:
            $ref: '#/components/schemas/DrivingLicence'
        medicCourse:
          type: boolean
          description: Whether the club member has completed the medic course
    FormCreateUser:
      type: object
      description: |-
        Data required to create new member.  
        
        Additional validations: 
        - either contact or guardian needs to be set
        - when nationality is different than `CZ`, `birthCertificateNumber` value will be ignored
      required:
        - firstName
        - lastName
        - gender
        - dateOfBirth
        - nationality
        - address
      properties:
        firstName:
          type: string
          description: First name of the club member
        lastName:
          type: string
          description: Last name of the club member
        registrationNumber:
          $ref: '#/components/schemas/RegistrationNumber'
        gender:
          type: string
          enum: [ male, female ]
        dateOfBirth:
          type: string
          format: date
          description: Date of birth of the club member
        birthCertificateNumber:
          $ref: '#/components/schemas/BirthCertificateNumber'
        nationality:
          $ref: '#/components/schemas/CountryCode'
        address:
          $ref: '#/components/schemas/Address'
        contact:
          $ref: '#/components/schemas/Contact'
        guardians:
          type: array
          items:
            $ref: '#/components/schemas/LegalGuardian'
        siCard:
          $ref: '#/components/schemas/SICard'
        dietaryRestrictions:
          type: string
          description: Dietary restrictions of the club member
    FormUpdateUserByAdmin:
      type: object
      description: |-
        Member attributes editable by admin user = user holding grant [TBD]
        
        Additional validations: 
        - when `CZ` is selected as nationality, then `birthCertificateNumber` is required value
      required:
        - firstName
        - lastName
        - dateOfBirth
        - nationality
        - gender
      properties:
        firstName:
          type: string
          description: |-
            First name of the club member
        lastName:
          type: string
          description: |-
            Last name of the club member
        dateOfBirth:
          type: string
          format: date
          description: |-
            Date of birth of the club member
        birthCertificateNumber:
          $ref: '#/components/schemas/BirthCertificateNumber'
        nationality:
          $ref: '#/components/schemas/CountryCode'
        gender:
          type: string
          enum: [ male, female ]
    FormUpdateMyUserData:
      description: |-
        Member attributes which can be updated by member himself (member can update some own attributes)  
        
        Additional validations:
        - either contact or at least 1 guardian needs to be entered
      required:
        - identityCard
        - address
      properties:
        identityCard:
          $ref: '#/components/schemas/IdentityCard'
        nationality:
          $ref: '#/components/schemas/CountryCode'
        address:
          $ref: '#/components/schemas/Address'
        contact:
          $ref: '#/components/schemas/Contact'
        guardians:
          type: array
          items:
            $ref: '#/components/schemas/LegalGuardian'
        siCard:
          $ref: '#/components/schemas/SICard'
        bankAccount:
          $ref: '#/components/schemas/BankAccountNumber'
        dietaryRestrictions:
          type: string
          description: |-
            Dietary restrictions of the club member
        drivingLicence:
          type: array
          items:
            $ref: '#/components/schemas/DrivingLicence'
        medicCourse:
          type: boolean
          description: |-
            Whether the club member has completed the medic course
    LegalGuardian:
      type: object
      required:
        - firstName
        - lastName
        - contact
      properties:
        firstName:
          type: string
          description: First name of the guardian
        lastName:
          type: string
          description: Last name of the guardian
        contact:
          $ref: '#/components/schemas/Contact'
        note:
          type: string
          description: Note about the guardian (matka, otec)
    BankAccountNumber:
      type: string
      pattern: ^[A-Z]{2}[0-9]+$
      description: |-
        Bank account number of the club member IBAN
    OBLicence:
      type: object
      required:
        - licence
      properties:
        licence:
          type: string
          enum: [ E, R, A, B, C ]
          description: License number of the club member
    RefereeLicence:
      type: object
      required:
        - licence
        - expiryDate
      properties:
        licence:
          type: string
          enum: [ R1, R2, R3 ]
          description: referee license number of the club member
        expiryDate:
          type: string
          format: date
          description: Expiry date of the license
    TrainerLicence:
      type: object
      required:
        - licence
        - expiryDate
      properties:
        licence:
          type: string
          enum: [ T1, T2, T3 ]
          description: trainer license number of the club member
        expiryDate:
          type: string
          format: date
          description: Expiry date of the license
    Licences:
      type: object
      properties:
        ob:
          $ref: '#/components/schemas/OBLicence'
        referee:
          $ref: '#/components/schemas/RefereeLicence'
        trainer:
          $ref: '#/components/schemas/TrainerLicence'
    DeleteCheck:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the club member can be deleted or not
        errors:
          type: array
          items:
            type: string
          description: Reasons why the club member can't be deleted
  securitySchemes:
    klabis:
      type: openIdConnect
      openIdConnectUrl: https://klabis-auth.polach.cloud/.well-known/openid-configuration