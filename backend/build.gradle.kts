import org.apache.commons.lang3.StringUtils
import org.springframework.boot.gradle.tasks.bundling.BootBuildImage

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    java
    id("org.springframework.boot") version "3.2.0"
    id("io.spring.dependency-management") version "1.1.5"
    id("org.openapi.generator") version "7.6.0"
}

repositories {
    mavenLocal()
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

group = "club.zabiny"
version = "0.1-SNAPSHOT"
description = "klabis"
java.sourceCompatibility = JavaVersion.VERSION_21


//val dockerImageName = "registry.polach.cloud/zbm/web-2.0/${group}.${description}:${project.version}"
val dockerImageName = "registry.polach.cloud/zbm/web-2.0/${description}:${project.version}"
println(dockerImageName)

val recordbuilderVersion = "41"
val mapstructVersion = "1.6.0.Beta1"
val mapstructSpringExtensionsVersion = "1.1.1"

dependencies {

    implementation("org.springframework.boot:spring-boot-starter-actuator")
    //implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-data-jdbc")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-authorization-server")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-client")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server")
    implementation("org.springframework.boot:spring-boot-starter-web")
    testImplementation("org.springframework.boot:spring-boot-devtools")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // Jackson mappings
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-csv")

    // Test containers
    testImplementation("org.springframework.boot:spring-boot-testcontainers")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:postgresql")

    // DB
    runtimeOnly("org.postgresql:postgresql")
    //runtimeOnly(libs.com.h2database.h2)

    // OPENAPI
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0")
    implementation("org.openapitools:jackson-databind-nullable:0.2.6")
    implementation("org.hibernate:hibernate-validator:8.0.1.Final")

    // MapStruct
    implementation("org.mapstruct:mapstruct:${mapstructVersion}")
    implementation("org.mapstruct.extensions.spring:mapstruct-spring-annotations:${mapstructSpringExtensionsVersion}")
    annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")
    annotationProcessor("org.mapstruct.extensions.spring:mapstruct-spring-extensions:${mapstructSpringExtensionsVersion}")
    testAnnotationProcessor("org.mapstruct.extensions.spring:mapstruct-spring-extensions:${mapstructSpringExtensionsVersion}")
    testImplementation("org.mapstruct.extensions.spring:mapstruct-spring-test-extensions:${mapstructSpringExtensionsVersion}")

    // RecordBuilder
    annotationProcessor("io.soabase.record-builder:record-builder-processor:${recordbuilderVersion}")
    compileOnly("io.soabase.record-builder:record-builder-core:${recordbuilderVersion}")

    // Various
    implementation("org.jmolecules:jmolecules-ddd:1.9.0")
    //implementation("org.jmolecules:jmolecules-hexagonal-architecture:1.9.0")
    implementation("org.jmolecules:jmolecules-onion-architecture:1.9.0")
    implementation("org.jmolecules:jmolecules-events:1.9.0")
    testImplementation("org.jmolecules.integrations:jmolecules-archunit:0.20.0")
    testImplementation("com.tngtech.archunit:archunit-junit5:1.3.0")
}

tasks.withType<Test> {
    useJUnitPlatform()
}

configurations {
    compileOnly {
        extendsFrom(configurations.annotationProcessor.get())
    }
}

java.sourceSets["main"].java {
    srcDir("$buildDir/generated/klabisapi/src/main/java")
}

val copyApiSpecs = tasks.register<Copy>("copyApiSpecs") {
    from(layout.projectDirectory.file("../klabis-api-spec.yaml"))
    into(layout.buildDirectory.dir("resources/main/static"))
}

java.sourceSets["main"].resources {
    srcDir(copyApiSpecs.map { it.temporaryDir })
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"
}

//tasks.register<org.openapitools.generator.gradle.plugin.tasks.GenerateTask>("generateKlabisApiServerStub") {
openApiGenerate {
//    group = "openapi tools"
    generatorName.set("spring")
    inputSpec.set("$rootDir/../klabis-api-spec.yaml")
    outputDir.set("$buildDir/generated/klabisapi")
    apiPackage.set("club.klabis.api")
    invokerPackage.set("org.openapi.example.invoker")
    modelPackage.set("club.klabis.api.dto")
    modelNameSuffix.set("ApiDto")
    library.set("spring-boot")
    configOptions.putAll(
        mapOf(
            "dateLibrary" to "java8",
            "useSpringBoot3" to "true",
            "generateBuilders" to "true",
            "useSpringController" to "false",
            //"hateoas" to "false",
            "booleanGetterPrefix" to "is",
            "interfaceOnly" to "true",
            "defaultInterfaces" to "false",
            "useBeanValidation" to "true"
        )
    )
}

tasks.compileJava.get().dependsOn(tasks.openApiGenerate)

tasks.getByName<BootBuildImage>("bootBuildImage") {
    imageName = dockerImageName
    publish = StringUtils.isNotBlank(System.getenv("DOCKER_USERNAME")) && StringUtils.isNotBlank(System.getenv("DOCKER_PASSWORD"))
    docker {
        publishRegistry {
            username = StringUtils.defaultIfBlank(System.getenv("DOCKER_USERNAME"), "dummy")
            password = StringUtils.defaultIfBlank(System.getenv("DOCKER_PASSWORD"), "dummy")
            url = "https://registry.polach.cloud"
            email = "gradle@noreply.com"
        }
    }
}

