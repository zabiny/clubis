openapi: 3.1.0
info:
  title: Klabis - OpenAPI 3.1
  description: |
    Klabis API docs

    ## Glossary
    - `member` - club member who can use the application   
    - `user` - logged in member
    - `grant` - configurable permission allowing user to perform selected action or view some data
    
    ## Authorization
    Every operation changing data (and some view requests) require `grant` which represents permission for the user to perform such operation.   
    
    There are 2 types of grants: 
    
    ### Global grants
    These grants are assigned to user and are valid globally in the application. They grant permission for operations like Create new member, etc. 
    
    ### Member specific grants
    These grants represents permission to perform operation (or view data) on behalf of selected user. User can receive this grant in two ways:
    - user may allow another member to perform operation on his behalf/view his data
    - user is granted permission to perform operation on behalf of another member / view another member's data because of membership/leadership of user group

    Operations / data protected by this type of grant can be automatically performed if user is same person as member who is described by protected data or if operation is changing data of such member.   

    ### What authorization is required to use API endpoint?
    If endpoint requires authorization, it is written in description text of such endpoint with label "Required authorization"
    
    ### What authorization is required to see value of attribute in the response?
    Response attributes: even some attributes in the response may require specific grant - see description of the attribute in response OpenAPI/JSON schema. If user doesn't hold such grant, attribute will be returned as empty (null)  

    ## API versioning
    To be added later (before first production release). At current stage it's not needed. Most likely either contentType or request header versioning strategy will be used.  

  contact:
    email: klabis@otakar.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 0.2.1
servers:
  - url: https://klabis-auth.polach.cloud
  - url: https://api.klabis.otakar.io
tags:
  - name: members
    description: Club members
  - name: security
    description: API used to control authentication and authorization
  - name: ORIS
    description: Integration endpoints with ORIS - https://oris.orientacnisporty.cz/
  - name: CUS
    description: Integration endpoints with CUS - https://www.cuscz.cz/
  - name: WIP
    description: "[odkladiste pro 'work-in-progress' endpointy]"
paths:
  /me/password:
    put:
      tags:
        - WIP
      summary: "[WIP] - Set a new password"
      description: Sets a new password for currently logged in user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: The new password
      responses:
        '200':
          description: New password set successfully
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /members:
    get:
      tags:
        - members
      summary: List all club members
      description: Returns a list of all club members
      parameters:
        - name: view
          in: query
          required: false
          description: |
            Defines set of returned data
            - full: all member data what are displayable to user are returned
            - compact: `id`, `firstName`, `lastName`, 'registrationNumber`
          schema:
            type: string
            enum:
              - full
              - compact
            default: compact
        - name: suspended
          in: query
          required: false
          description: |
            | value | effect |
            | --- | --- |
            | `true` | returns both active and suspended members | 
            | `false` | return only active members |
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: A list of club members
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Member'
                    - $ref: '#/components/schemas/MemberViewCompact'
        '401':
            description: Unauthorized - not logged in
  /members/{memberId}:
    parameters:
      - name: memberId
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - members
      summary: Get member by ID
      description: Returns a member
      responses:
        '200':
          description: A single member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '401':
          description: Unauthorized - not logged in
    put:
      tags:
        - members
      summary: "Update member (TBD: move these edits away and/or split them into 2 endpoints?)"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ChangeMyDetailsForm'
                - $ref: '#/components/schemas/MemberInfoUpdateByMembersManagerForm'
      responses:
        '200':
          description: Club member updated successfully
        '401':
          description: Unauthorized - not logged in
        '403':
          description: Forbidden - User does not have permission to update a member
        '404':
          description: Club member not found

  /memberRegistrations:
    get:
      tags:
        - members
      summary: Get values to be prefilled in member registration form
      description: |
        Returns values to be prefilled in member registration form.   
        
        - when `orisId` is provided and user with such ID exists in ORIS, then data from ORIS for such user will be returned (`firstName`, `lastName`, `registrationNumber`, etc..)
        - when both `sex` and `sex` parameters are provided, then suggested `registrationNumber` will be returned
        - when `oris`, `sex` and `sex` are provided and registration number is available in ORIS, then registration number from ORIS will be returned
                
        #### Required authorization
        requires `members:register` grant
      parameters:
        - name: orisId
          schema:
            $ref: '#/components/schemas/OrisID'
            required: false
          in: query
          description: ORIS ID of user who shall be registered. When provided, available values obtained from ORIS will be returned if such user is found in the ORIS
        - name: dateOfBirth
          in: query
          schema:
            type: string
            format: date
        - name: sex
          in: query
          schema:
            $ref: '#/components/schemas/Sex'
      responses:
        '201':
          description: Registration was processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberRegistrationForm'
        '400':
          description: Bad request - Invalid data
        '409':
          description: Conflict - User with the same registration number already exists
        '403':
          description: Forbidden - User does not have permission to submit registration of new member
    post:
      tags:
        - members
      summary: Register a new club member
      description: |
        Registers a new club member with the provided details.
        
        #### Required authorization
        requires `members:register` grant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberRegistrationForm'
      responses:
        '201':
          description: Registration was processed successfully
        '400':
          description: Bad request - Invalid data
        '403':
          description: Forbidden - User does not have permission to submit registration of new member
        '409':
          description: Conflict - User already exists (usually registration was submitted with existing registration number)
  /members/{memberId}/suspendMembership:
    parameters:
      - name: memberId
        in: path
        required: true
        description: ID of the club member whom membership will be suspended
        schema:
          type: integer
    get:
      tags:
        - members
      summary: Retrieve information about member account status for membership suspension
      description: |
        Returns information about member account to be suspended. 
        
        #### Required authorization
        requires `members:suspendMembership` grant
      responses:
        200:
          description: details about member account important for membership suspension
          content:
            application/json:
              schema:
                type: object
                properties:
                  canSuspend:
                    type: boolean
                    description: tells if member account can be suspended
                  details:
                    type: object
                    properties:
                      finance:
                        type: object
                        properties:
                          status:
                            type: boolean
                            description: tells if finance account balance permits membership suspension
        403:
          description: Unauthorized - User does not have permission to suspend membership
        404:
          description: Club member not found
    post:
      tags:
        - members
      summary: Suspend membership for a club member
      description: |
        Suspends membership for a club member. 
        
        If there are some blockers (debt, etc), it responds with HTTP 409 unless `force=true` parameter was used.

        #### Required authorization
        requires `members:suspendMembership` grant
      parameters:
        - name: force
          in: query
          description: Forces membership suspension for member even if there are some reasons (like negative finance account balance, etc..) why it would be wise to postpone user membership suspension
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Membership of club member was suspended successfully
        403:
          description: Unauthorized - User does not have permission to suspend membership
        404:
          description: Club member not found
        409:
          description: It's not possible to suspend membership for club member. See response body for actual reason(s). You may use `force` to override these reasons.
          content:
            application/json:
              type: string
              example: TO BE DEFINED
  /cus/exports/members:
    get:
      tags:
        - WIP
      summary: "[WIP] - export users in CUS format"
      responses:
        '200':
          description: A list of differences
        '401':
          description: Unauthorized - not logged in
        '403':
          description: Forbidden - User does not have permission to delete a member
components:
  schemas:
    CountryCode:
      type: string
      pattern: ^[A-Z]{2}$
      description: two letter country code, ISO 3166-1 alpha-2
    BirthCertificateNumber:
      type: string
      pattern: ^[0-9]{6}/[0-9]{3,4}$
      description: Birth certificate number for Czech citizens
    RegistrationNumber:
      type: string
      pattern: ^[A-Z]{3}[0-9]{4}$
      description: ORIS registration number
    OrisID:
      type: integer
      description: Oris ID of registered orienteering runner
    DrivingLicence:
      type: string
      enum: [ B, BE, C, D ]
    SICard:
      type: number
      description: SI chip used by member
    Sex:
      type: string
      enum:
        - male
        - female
    Contact:
      type: object
      description: At least one of email or phone value is required
      required:
        - email
        - phone
      properties:
        email:
          type: string
          format: email
          description: Email address of the club member or guardian
        phone:
          type: string
          description: Phone number of the club member or guardian
        note:
          type: string
          description: Note about the contact
    Address:
      type: object
      properties:
        streetAndNumber:
          type: string
          description: Street name and number
        city:
          type: string
          description: City
        postalCode:
          type: string
          description: Postal or ZIP code
        country:
          $ref: '#/components/schemas/CountryCode'
    IdentityCard:
      type: object
      properties:
        number:
          type: string
          description: Personal identification number of the club member
        expiryDate:
          type: string
          format: date
          description: Expiry date of the ID card, YYYY-MM-DD
    MemberViewCompact:
      description: |
        'compact' view of Member
      type: object
      required:
        - id
        - firstName
        - lastName
        - registrationNumber
      properties:
        id:
          type: integer
          description: Unique identifier for the club member
          readOnly: true
        firstName:
          type: string
          description: First name of the club member
        lastName:
          type: string
          description: Last name of the club member
        registrationNumber:
          $ref: '#/components/schemas/RegistrationNumber'
    Member:
      allOf:
        - $ref: '#/components/schemas/MemberViewCompact'
        - type: object
          required:
            - id
            - firstName
            - lastName
            - sex
            - dateOfBirth
            - nationality
            - address
          properties:
            id:
              type: integer
              description: Unique identifier for the club member
            birthCertificateNumber:
              $ref: '#/components/schemas/BirthCertificateNumber'
            identityCard:
              $ref: '#/components/schemas/IdentityCard'
            address:
              $ref: '#/components/schemas/Address'
            dateOfBirth:
              type: string
              format: date
              description: Date of birth of the club member
            contact:
              type: object
              items:
                $ref: '#/components/schemas/Contact'
            legalGuardians:
              type: array
              items:
                $ref: '#/components/schemas/LegalGuardian'
            siCard:
              type: number
              description: Chip number assigned to the club member
            nationality:
              $ref: '#/components/schemas/CountryCode'
            sex:
              $ref: '#/components/schemas/Sex'
            licences:
              $ref: '#/components/schemas/Licences'
            bankAccount:
              $ref: '#/components/schemas/BankAccountNumber'
            dietaryRestrictions:
              type: string
              description: Dietary restrictions of the club member
            drivingLicence:
              type: array
              items:
                $ref: '#/components/schemas/DrivingLicence'
            medicCourse:
              type: boolean
              description: Whether the club member has completed the medic course
        - description: Member attributes

    MemberRegistrationForm:
      type: object
      description: |-
        Data required to register new member.  
        
        #### Required authorization
        - requires `members:register` grant
        
        Additional validations: 
        - either contact or guardian needs to be set
        - when nationality is different than `CZ`, `birthCertificateNumber` value will be ignored
      required:
        - firstName
        - lastName
        - sex
        - dateOfBirth
        - nationality
        - address
      properties:
        firstName:
          type: string
          description: First name of the club member
        lastName:
          type: string
          description: Last name of the club member
        sex:
          $ref: '#/components/schemas/Sex'
        dateOfBirth:
          type: string
          format: date
          description: Date of birth of the club member
        birthCertificateNumber:
          $ref: '#/components/schemas/BirthCertificateNumber'
          writeOnly: true
        nationality:
          $ref: '#/components/schemas/CountryCode'
          writeOnly: true
        address:
          $ref: '#/components/schemas/Address'
          writeOnly: true
        contact:
          $ref: '#/components/schemas/Contact'
          writeOnly: true
        guardians:
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/LegalGuardian'
        siCard:
          $ref: '#/components/schemas/SICard'
        bankAccount:
          $ref: '#/components/schemas/BankAccountNumber'
          writeOnly: true
        registrationNumber:
          $ref: '#/components/schemas/RegistrationNumber'
        orisId:
          $ref: '#/components/schemas/OrisID'
#        trainingGroup:
#          type: ???
#          description: training group where newly registered member will be added
    MemberInfoUpdateByMembersManagerForm:
      type: object
      description: |-
        Member attributes editable by TBD-"vedeni".

        #### Required authorization
        - requires `members:edit` grant
       
        Additional validations: 
        - when `CZ` is selected as nationality, then `birthCertificateNumber` is required value
      required:
        - firstName
        - lastName
        - dateOfBirth
        - nationality
        - sex
      properties:
        firstName:
          type: string
          description: First name of the club member
        lastName:
          type: string
          description: Last name of the club member
        dateOfBirth:
          type: string
          format: date
          description: Date of birth of the club member
        birthCertificateNumber:
          $ref: '#/components/schemas/BirthCertificateNumber'
        nationality:
          $ref: '#/components/schemas/CountryCode'
        sex:
          $ref: '#/components/schemas/Sex'
    ChangeMyDetailsForm:
      description: |
        Member attributes which can be updated by member himself (member can update some own attributes)  
        
        #### Required authorization
        - user can edit own member data 

        Additional validations:
        - either contact or at least 1 guardian needs to be entered
      required:
        - identityCard
        - address
      properties:
        identityCard:
          $ref: '#/components/schemas/IdentityCard'
        nationality:
          $ref: '#/components/schemas/CountryCode'
        address:
          $ref: '#/components/schemas/Address'
        contact:
          $ref: '#/components/schemas/Contact'
        guardians:
          type: array
          items:
            $ref: '#/components/schemas/LegalGuardian'
        siCard:
          $ref: '#/components/schemas/SICard'
        bankAccount:
          $ref: '#/components/schemas/BankAccountNumber'
        dietaryRestrictions:
          type: string
          description: Dietary restrictions of the club member
        drivingLicence:
          type: array
          items:
            $ref: '#/components/schemas/DrivingLicence'
        medicCourse:
          type: boolean
          description: Whether the club member has completed the medic course
    LegalGuardian:
      type: object
      required:
        - firstName
        - lastName
        - contact
      properties:
        firstName:
          type: string
          description: First name of the guardian
        lastName:
          type: string
          description: Last name of the guardian
        contact:
          $ref: '#/components/schemas/Contact'
        note:
          type: string
          description: Note about the guardian (matka, otec)
    BankAccountNumber:
      type: string
      pattern: ^[A-Z]{2}[0-9]+$
      description: Bank account number of the club member IBAN
    OBLicence:
      type: object
      required:
        - licence
      properties:
        licence:
          type: string
          enum: [ E, R, A, B, C ]
          description: License number of the club member
    RefereeLicence:
      type: object
      required:
        - licence
        - expiryDate
      properties:
        licence:
          type: string
          enum: [ R1, R2, R3 ]
          description: referee license number of the club member
        expiryDate:
          type: string
          format: date
          description: Expiry date of the license
    TrainerLicence:
      type: object
      required:
        - licence
        - expiryDate
      properties:
        licence:
          type: string
          enum: [ T1, T2, T3 ]
          description: trainer license number of the club member
        expiryDate:
          type: string
          format: date
          description: Expiry date of the license
    Licences:
      type: object
      properties:
        ob:
          $ref: '#/components/schemas/OBLicence'
        referee:
          $ref: '#/components/schemas/RefereeLicence'
        trainer:
          $ref: '#/components/schemas/TrainerLicence'
    GlobalGrants:
      type: string
      description: |
        Global grants are assigned to users and are valid globally in the application.
        
        | Grant name | granted permissions |
        | --- | --- |
        | `members:register` | can create new members |
        | `members:edit` | can edit selected attributes for all existing members |
        | `members:suspendMembership` | can suspend membership for club members |
      enum:
        - members:register
        - members:edit
        - members:suspendMembership
    MemberSpecificGrants:
      type: string
      description: |
        Member specific grants are defined between 2 users (user is allowed to perform specific action on behalf of another user). These define fine-grained permissions and can be granted explicitely to selected users or through permissions granted from membership between members of user groups.

        | Grant name | granted permissions |
        | --- | --- |
        | `members#canDisplayMemberPersonalContact` | can display personal contact information of member |
        | `members#canDisplayMemberLegalGuardianContact` | can display contact information of legal guardian of member |
        | `members#canDisplayMemberAddress` | can display contact information of legal guardian of member |
      enum:
        - members#canDisplayMemberPersonalContact
        - members#canDisplayMemberLegalGuardianContact
        - members#canDisplayMemberAddress
  securitySchemes:
    klabis:
      type: openIdConnect
      openIdConnectUrl: https://klabis-auth.polach.cloud/.well-known/openid-configuration
security:
  - klabis:
      - openid
