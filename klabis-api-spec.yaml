openapi: 3.0.0
info:
  title: Klabis - OpenAPI 3.1
  description: Klabis API docs
  contact:
    email: klabis@otakar.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 0.1.12
servers:
  - url: https://api.klabis.otakar.io
tags:
  - name: members info
  - name: members administration
  - name: cus
  - name: auth
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Login to the application
      description: >
        Logs a user into the application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username for login
                password:
                  type: string
                  description: The password for login
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The JWT token
        '401':
          description: Unauthorized - Invalid username or password
        '500':
          description: Internal Server Error
  /auth/logout:
    post:
      tags:
        - auth
      summary: Logout from the application
      description: >
        Logs a user out of the application
      responses:
        '200':
          description: User logged out successfully
        '401':
          description: Unauthorized - User is not logged in
        '500':
          description: Internal Server Error
  /auth/set-password:
    post:
      tags:
        - auth
      summary: Set a new password
      description: >
        Sets a new password for the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: The new password
      responses:
        '200':
          description: New password set successfully
        '401':
          description: Unauthorized - User is not logged in
        '500':
          description: Internal Server Error
  /members:
    get:
      tags:
        - members info
      summary: List all club members
      description: Returns a list of all club members
      responses:
        '200':
          description: A list of club members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
        '500':
          description: Internal Server Error

    post:
      tags:
        - members administration
      summary: Create a new club member
      description: >
        Creates a new club member with the provided details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMember'
      responses:
        '201':
          description: New club member created successfully
        '401':
          description: Unauthorized - User does not have permission to create a new member
        '500':
          description: Internal Server Error
  /members/{memberId}:
    get:
      tags:
        - members info
      summary: Get member by ID
      description: Returns a single club member
      parameters:
        - name: memberId
          in: path
          required: true
          description: ID of the club member to get
          schema:
            type: integer
      responses:
        '200':
          description: A single club member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '404':
          description: Club member not found
        '500':
          description: Internal Server Error
    put:
      tags:
        - members info
      summary: Update member
      parameters:
        - name: memberId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMember'
    delete:
      tags:
        - members administration
      summary: Delete member
      description: Deletes a club member with the provided ID.
      parameters:
        - name: memberId
          in: path
          required: true
          description: ID of the club member to delete
          schema:
            type: integer
      responses:
        '204':
          description: Club member deleted successfully
        '401':
          description: Unauthorized - User does not have permission to delete a member
        '404':
          description: Club member not found
        '500':
          description: Internal Server Error
  /members/{memberId}/delete-check:
    get:
      tags:
        - members administration
      summary: Check if member can be deleted
      description: >
        Checks if a club member with the provided ID can be deleted.
      parameters:
        - name: memberId
          in: path
          required: true
          description: ID of the club member to check
          schema:
            type: integer
      responses:
        '200':
          description: Club member can be deleted
        '401':
          description: Unauthorized - User does not have permission to delete a member
        '404':
          description: Club member not found
        '500':
          description: Internal Server Error
  /members/free-registration-id:
    get:
      tags:
        - members administration
      summary: Get a free registration ID
      description: >
        Returns a free registration ID that can be used to register a new club member.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dateOfBirth:
                  type: string
                gender:
                  type: string
                  enum: [male, female]

      responses:
        '200':
          description: A free registration ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  registrationId:
                    type: integer
                    description: A free registration ID
        '500':
          description: Internal Server Error
  /cus:
    get:
      tags:
        - cus
      summary: List diff against ČUS database
      responses:
        '200':
          description: A list of differences
    post:
      tags:
        - cus
      summary: Update ČUS database
components:
  schemas:
    Contact:
      type: object
      properties:
        isPublic:
          type: boolean
          description: Whether the contact information is public or not
          default: false
        contactType:
          type: string
          enum: [direct_contact, guardian_contact]
          description: Type of contact information
        email:
          type: string
          format: email
          description: Email address of the club member or guardian
        phone:
          type: string
          description: Phone number of the club member or guardian
    Address:
      type: object
      properties:
        isPublic:
          type: boolean
          description: Whether the address is public or not
          default: false
        street:
          type: string
          description: Street name and number
        city:
          type: string
          description: City
        postalCode:
          type: string
          description: Postal or ZIP code
        country:
          type: string
          description: Country name
    IdDocument:
      type: object
      properties:
        idCardNumber:
          type: string
          description: Personal identification number of the club member
        expiryDate:
          type: string
          format: date
          description: Expiry date of the ID card
    Member:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the club member
        firstName:
          type: string
          description: First name of the club member
        lastName:
          type: string
          description: Last name of the club member
        dateOfBirth:
          type: string
          format: date
          description: Date of birth of the club member
        nationalIdNumber:
          type: string
        nationality:
          type: string
        idDocument:
          $ref: '#/components/schemas/IdDocument'
        address:
          $ref: '#/components/schemas/Address'
        contact:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        siCard:
          type: array
          items:
            type: number
          description: Chip number assigned to the club member
        gender:
          type: string
          enum: [male, female]
        license:
          type: string
          enum: [E, R, A, B, C]
          description: License number of the club member
    CreateMember:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the club member
        lastName:
          type: string
          description: Last name of the club member
        dateOfBirth:
          type: string
          format: date
          description: Date of birth of the club member
        nationalIdNumber:
          type: string
          description: Personal identification number of the club member
        nationality:
          type: string
          description: Nationality of the club member
        address:
          $ref: '#/components/schemas/Address'
        gender:
          type: string
          enum: [male, female]
          description: Gender of the club member
        contact:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        siCard:
          type: number
          description: Chip number assigned to the club member
      required:
        - firstName
        - lastName
        - dateOfBirth
        - nationalIdNumber
        - nationality
        - address
        - gender
        - contact
    UpdateMember:
      type: object
      properties:
        siCards:
          type: array
          items:
            type: number
          description: List of chip numbers assigned to the club member
        address:
          required: true
          $ref: '#/components/schemas/Address'
        contact:
          type: array
          required: true
          items:
            $ref: '#/components/schemas/Contact'
        idDocument:
          $ref: '#/components/schemas/IdDocument'



