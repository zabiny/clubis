/* tslint:disable */
/* eslint-disable */
/**
 * Klabis API
 * --- # Work In progress Application is currently under development: - changes may be done to any part of API - saved data may be reset at any moment (currently at any API server restart) --- # Glossary - `member` - club member who can use the application    - `user` - logged in member - `grant` - configurable permission allowing user to perform selected action or view some data  # Authorization Every operation changing data (and some view requests) require `grant` which represents permission for the user to perform such operation.     There are 2 types of grants:   ## Global grants These grants are assigned to user and are valid globally in the application. They grant permission for operations like Create new member, etc.   ## Member specific grants These grants represents permission to perform operation (or view data) on behalf of selected user. User can receive this grant in two ways: - user may allow another member to perform operation on his behalf/view his data - user is granted permission to perform operation on behalf of another member / view another member\'s data because of membership/leadership of user group  Operations / data protected by this type of grant can be automatically performed if user is same person as member who is described by protected data or if operation is changing data of such member.     ## What authorization is required to use API endpoint? If endpoint requires authorization, it is written in description text of such endpoint with label \"Required authorization\"  ## What authorization is required to see value of attribute in the response? Response attributes: even some attributes in the response may require specific grant - see description of the attribute in response OpenAPI/JSON schema. If user doesn\'t hold such grant, attribute will be returned as empty (null)    # API versioning To be added later (before first production release). At current stage it\'s not needed. Most likely either contentType or request header versioning strategy will be used.   
 *
 * The version of the OpenAPI document: 0.2.1
 * Contact: klabis@otakar.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Member,
  MemberEditForm,
  MemberRegistrationForm,
  MembersList,
  MembersMemberIdSuspendMembershipFormPost409Response,
  MembershipSuspensionInfo,
  RFC7807ErrorResponse,
  RegistrationNumberGet200Response,
  Sex,
} from '../models/index';
import {
    MemberFromJSON,
    MemberToJSON,
    MemberEditFormFromJSON,
    MemberEditFormToJSON,
    MemberRegistrationFormFromJSON,
    MemberRegistrationFormToJSON,
    MembersListFromJSON,
    MembersListToJSON,
    MembersMemberIdSuspendMembershipFormPost409ResponseFromJSON,
    MembersMemberIdSuspendMembershipFormPost409ResponseToJSON,
    MembershipSuspensionInfoFromJSON,
    MembershipSuspensionInfoToJSON,
    RFC7807ErrorResponseFromJSON,
    RFC7807ErrorResponseToJSON,
    RegistrationNumberGet200ResponseFromJSON,
    RegistrationNumberGet200ResponseToJSON,
    SexFromJSON,
    SexToJSON,
} from '../models/index';

export interface MemberRegistrationsPostRequest {
    memberRegistrationForm: MemberRegistrationForm;
}

export interface MembersGetRequest {
    view?: MembersGetView;
    suspended?: boolean;
}

export interface MembersMemberIdEditMemberInfoFormGetRequest {
    memberId: number;
}

export interface MembersMemberIdEditMemberInfoFormPutRequest {
    memberId: number;
    memberEditForm: MemberEditForm;
}

export interface MembersMemberIdGetRequest {
    memberId: number;
}

export interface MembersMemberIdSuspendMembershipFormGetRequest {
    memberId: number;
}

export interface MembersMemberIdSuspendMembershipFormPostRequest {
    memberId: number;
    force?: boolean;
}

export interface RegistrationNumberGetRequest {
    dateOfBirth: Date;
    sex: Sex;
}

/**
 * 
 */
export class MembersApi extends runtime.BaseAPI {

    /**
     * Registers a new club member with the provided details.  #### Required authorization requires `members:register` grant` 
     * Register a new club member
     */
    async memberRegistrationsPostRaw(requestParameters: MemberRegistrationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['memberRegistrationForm'] == null) {
            throw new runtime.RequiredError(
                'memberRegistrationForm',
                'Required parameter "memberRegistrationForm" was null or undefined when calling memberRegistrationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/memberRegistrations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MemberRegistrationFormToJSON(requestParameters['memberRegistrationForm']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Registers a new club member with the provided details.  #### Required authorization requires `members:register` grant` 
     * Register a new club member
     */
    async memberRegistrationsPost(requestParameters: MemberRegistrationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.memberRegistrationsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all club members
     * List all club members
     */
    async membersGetRaw(requestParameters: MembersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembersList>> {
        const queryParameters: any = {};

        if (requestParameters['view'] != null) {
            queryParameters['view'] = requestParameters['view'];
        }

        if (requestParameters['suspended'] != null) {
            queryParameters['suspended'] = requestParameters['suspended'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/members`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembersListFromJSON(jsonValue));
    }

    /**
     * Returns a list of all club members
     * List all club members
     */
    async membersGet(requestParameters: MembersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembersList> {
        const response = await this.membersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data for edit member information form
     */
    async membersMemberIdEditMemberInfoFormGetRaw(requestParameters: MembersMemberIdEditMemberInfoFormGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberEditForm>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling membersMemberIdEditMemberInfoFormGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/members/{memberId}/editMemberInfoForm`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberEditFormFromJSON(jsonValue));
    }

    /**
     * Returns data for edit member information form
     */
    async membersMemberIdEditMemberInfoFormGet(requestParameters: MembersMemberIdEditMemberInfoFormGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberEditForm> {
        const response = await this.membersMemberIdEditMemberInfoFormGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update member information
     */
    async membersMemberIdEditMemberInfoFormPutRaw(requestParameters: MembersMemberIdEditMemberInfoFormPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling membersMemberIdEditMemberInfoFormPut().'
            );
        }

        if (requestParameters['memberEditForm'] == null) {
            throw new runtime.RequiredError(
                'memberEditForm',
                'Required parameter "memberEditForm" was null or undefined when calling membersMemberIdEditMemberInfoFormPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/members/{memberId}/editMemberInfoForm`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MemberEditFormToJSON(requestParameters['memberEditForm']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update member information
     */
    async membersMemberIdEditMemberInfoFormPut(requestParameters: MembersMemberIdEditMemberInfoFormPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.membersMemberIdEditMemberInfoFormPutRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a member
     * Get member by ID
     */
    async membersMemberIdGetRaw(requestParameters: MembersMemberIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Member>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling membersMemberIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/members/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberFromJSON(jsonValue));
    }

    /**
     * Returns a member
     * Get member by ID
     */
    async membersMemberIdGet(requestParameters: MembersMemberIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Member> {
        const response = await this.membersMemberIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns information about member account to be suspended.   #### Required authorization requires `members:suspendMembership` grant 
     * Retrieve information about member account status for membership suspension
     */
    async membersMemberIdSuspendMembershipFormGetRaw(requestParameters: MembersMemberIdSuspendMembershipFormGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipSuspensionInfo>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling membersMemberIdSuspendMembershipFormGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/members/{memberId}/suspendMembershipForm`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipSuspensionInfoFromJSON(jsonValue));
    }

    /**
     * Returns information about member account to be suspended.   #### Required authorization requires `members:suspendMembership` grant 
     * Retrieve information about member account status for membership suspension
     */
    async membersMemberIdSuspendMembershipFormGet(requestParameters: MembersMemberIdSuspendMembershipFormGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipSuspensionInfo> {
        const response = await this.membersMemberIdSuspendMembershipFormGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Suspends membership for a club member.   If there are some blockers (debt, etc), it responds with HTTP \'409\' unless `force=true` parameter was used.  #### Required authorization requires `members:suspendMembership` grant 
     * Suspend membership for a club member
     */
    async membersMemberIdSuspendMembershipFormPostRaw(requestParameters: MembersMemberIdSuspendMembershipFormPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling membersMemberIdSuspendMembershipFormPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/members/{memberId}/suspendMembershipForm`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Suspends membership for a club member.   If there are some blockers (debt, etc), it responds with HTTP \'409\' unless `force=true` parameter was used.  #### Required authorization requires `members:suspendMembership` grant 
     * Suspend membership for a club member
     */
    async membersMemberIdSuspendMembershipFormPost(requestParameters: MembersMemberIdSuspendMembershipFormPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.membersMemberIdSuspendMembershipFormPostRaw(requestParameters, initOverrides);
    }

    /**
     * #### Required authorization requires `members:register` grant 
     * Get recommended registration number for sex and date of birth
     */
    async registrationNumberGetRaw(requestParameters: RegistrationNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegistrationNumberGet200Response>> {
        if (requestParameters['dateOfBirth'] == null) {
            throw new runtime.RequiredError(
                'dateOfBirth',
                'Required parameter "dateOfBirth" was null or undefined when calling registrationNumberGet().'
            );
        }

        if (requestParameters['sex'] == null) {
            throw new runtime.RequiredError(
                'sex',
                'Required parameter "sex" was null or undefined when calling registrationNumberGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dateOfBirth'] != null) {
            queryParameters['dateOfBirth'] = (requestParameters['dateOfBirth'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['sex'] != null) {
            queryParameters['sex'] = requestParameters['sex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/registrationNumber`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationNumberGet200ResponseFromJSON(jsonValue));
    }

    /**
     * #### Required authorization requires `members:register` grant 
     * Get recommended registration number for sex and date of birth
     */
    async registrationNumberGet(requestParameters: RegistrationNumberGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegistrationNumberGet200Response> {
        const response = await this.registrationNumberGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const MembersGetView = {
    Full: 'full',
    Compact: 'compact'
} as const;
export type MembersGetView = typeof MembersGetView[keyof typeof MembersGetView];
